Since the core functionality is in the cat function, we only need to update that part of the program; 
the main program can stay the same. This function creates a buffer of 128 bytes; an unsigned char is 
exactly one byte long. The while loop continues until it reaches the end of the file. Within the loop, 
it reads a bunch of data (up to 128 bytes) into the buffer using fread, and keeps track of how much it 
read using the numread variable. Then it writes that data back out using fwrite.

This is basically the same cat program that we wrote above, but it runs much faster even on slow systems 
because it reads a bunch of data at once. That way, the operating system can just read some data without 
having to keep going back to the file to read one letter at a time.

However, I wouldn’t use the “buffer” version of the program to teach someone about programming—at least, 
not right away. It’s more complicated and difficult to understand. Instead, I’d start with the “one letter” 
version, and move up to the “buffer” method once we’d learned the basics about programming. The trade-off 
here is “easy to learn” with “runs fast.”